// @Tadas Baltrūnas
// PS 5grupė

//--------------------------------------------------------------------------------------------
float MOVE_SPEED      = 7.5;
final static float SPRITE_SCALE    = 1;
final static int   SPRITE_SIZE     = 32;
final static float GRAVITY         = 0.7;
final static float JUMP_SPEED      = 11;
final static float WIDTH           = SPRITE_SIZE * 16;
final static float HEIGHT          = SPRITE_SIZE * 10;
final static float GROUND_LEVEL    = HEIGHT-SPRITE_SIZE;
final static float RIGHT_MARGIN    = 400;
final static float LEFT_MARGIN     = 60;
final static float VERTICAL_MARGIN = 300;
final static int   NEUTRAL_FACING  = 0;
final static int   RIGHT_FACING    = 1;
final static int   LEFT_FACING     = 2;
//--------------------------------------------------------------------------------------------
Player p;
PImage[] imgArray;
ArrayList<Sprite> platforms;
int row, col, numberOfImages, lvl = 1, lives = 3, pressed, X, Y;
boolean isGameOver, win, lost, visible;
float view_x, view_y;
PImage pImg, map, image;
//--------------------------------------------------------------------------------------------
int[] level1 = {
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,00,00,00,00,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,4,
4,468,463,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,468,463,00,00,00,00,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,4,
4,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,00,00,00,00,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,4,
};
int[] level2 = {
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,00,00,00,00,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,4,
4,468,463,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,468,463,00,00,00,00,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,4,
4,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,00,00,00,00,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,4,
};
int[] level3 = {
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,4,
4,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,00,00,00,00,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,4,
4,468,463,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,468,463,00,00,00,00,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,463,468,468,468,468,468,468,468,468,4,
4,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,00,00,00,00,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,400,401,393,394,394,395,396,397,398,399,4,
};
//--------------------------------------------------------------------------------------------
void setup(){
  size(800, 600);
  imageMode(CENTER);
  pImg = loadImage("sprite.png");
  p = new Player(pImg, 0.7);
  p.setBottom(GROUND_LEVEL);
  p.center_x = 110;
  platforms = new ArrayList<Sprite>();
  isGameOver = false;
  win = false;
  lost = false;
  pressed = 0;
  visible = false;
  
  if(lvl >= 4){
  lvl = 1;
  }

   map = loadImage("tileSheet1.png");
   col = map.width / SPRITE_SIZE;
   row = map.height / SPRITE_SIZE;
   generateImgArray();
   getLevel();

   view_x = 0;
   view_y = 0;
}
//--------------------------------------------------------------------------------------------
void draw(){
  background(255);
  scroll();
  
  displayAll();

  if(!isGameOver){
      updateAll();
   }      
} 
//--------------------------------------------------------------------------------------------
void scroll(){
  float right_boundary = view_x + width - RIGHT_MARGIN;
  if(p.getRight() > right_boundary){
   view_x += p.getRight() - right_boundary;
  }  
  float left_boundary = view_x + LEFT_MARGIN;
  if(p.getLeft() < left_boundary){
   view_x -= left_boundary - p.getLeft();
  }
  float bottom_boundary = view_y + height - VERTICAL_MARGIN;
  if(p.getBottom() > bottom_boundary){
   view_y += p.getBottom() - bottom_boundary;
  }
  float top_boundary = view_y + VERTICAL_MARGIN;
  if(p.getTop() < top_boundary){
   view_y -= top_boundary - p.getTop();
  }
  translate(-view_x, -view_y);
}
//--------------------------------------------------------------------------------------------
void getLevel(){
  if(lvl == 1){
   createPlatforms(level1); 
  }
  else if(lvl == 2){
   createPlatforms(level2); 
  }
  else if(lvl == 3){
   createPlatforms(level3); 
  }
  else{
   createPlatforms(level1); 
  }
}
//--------------------------------------------------------------------------------------------
public boolean isOnPlatforms(Sprite s, ArrayList<Sprite> walls){
  s.center_y += 5;
  ArrayList<Sprite> colList = checkCollisionList(s, walls);
  s.center_y -= 5;
  return colList.size() > 0;
}
//--------------------------------------------------------------------------------------------
public void resolveCollision(Sprite s, ArrayList<Sprite> walls){
  s.change_y += GRAVITY;
  s.center_y += s.change_y;
  ArrayList<Sprite> colList = checkCollisionList(s, walls);
  if(colList.size() > 0){
      Sprite collided = colList.get(0);  
      
      if(collided.image == imgArray[52]){
          lvl++;
          win = true;
      }
       if(s.change_y > 0){
           s.setBottom(collided.getTop());
       }
       else if(s.change_y < 0){
           s.setTop(collided.getBottom());  
       }
  s.change_y = 0;
  }
  s.center_x += s.change_x;
  colList = checkCollisionList(s, walls);
  if(colList.size() > 0){ 
      Sprite collided = colList.get(0);
       if(collided.image == imgArray[52] ){
          lvl++;
          win = true;
      }
      if(s.change_x > 0){ 
           s.setRight(collided.getLeft());
      }
      else if(s.change_x < 0){ 
           s.setLeft(collided.getRight()); 
      }
    }
 }
//--------------------------------------------------------------------------------------------
boolean checkCollision(Sprite s1, Sprite s2){ 
  boolean noXOverlap;
  boolean noYOverlap;
  
  if(s2.image != imgArray[0]){
    noXOverlap = s1.getRight() <= s2.getLeft() || s1.getLeft() >= s2.getRight();
    noYOverlap = s1.getBottom() <= s2.getTop() || s1.getTop() >= s2.getBottom();
  }
  else{
    noXOverlap = true;
    noYOverlap = true;
  }
  
  if(noXOverlap || noYOverlap)
      return false; 
  else
   return true; 
}
//--------------------------------------------------------------------------------------------
public ArrayList<Sprite> checkCollisionList(Sprite s, ArrayList<Sprite> list){
  ArrayList<Sprite> collisionList = new ArrayList<Sprite>();

  for(Sprite p: list){
      if(checkCollision(s, p)){
          collisionList.add(p);
      }
  }
  return collisionList;
}
//--------------------------------------------------------------------------------------------
void generateImgArray(){
   imgArray = new PImage[col*row];
   for(int i = 0; i < row; i++) {
      for(int j = 0; j < col; j++) {
        image = map.get(j*SPRITE_SIZE, i*SPRITE_SIZE, SPRITE_SIZE, SPRITE_SIZE);
        imgArray[i*col+j] = image;
      }
   }
}
//--------------------------------------------------------------------------------------------
void createPlatforms(int[] level1){
  for(int rows = 0; rows < 10; rows++){
    for(int cols = 0; cols < 100; cols++){
        int index = level1[rows * 100 + cols];
        Sprite s = new Sprite(imgArray[index], SPRITE_SCALE);
        s.center_x = SPRITE_SIZE/2 + cols * SPRITE_SIZE;
        s.center_y = SPRITE_SIZE/2 + rows * SPRITE_SIZE;
        platforms.add(s);
    }
  }
}
//--------------------------------------------------------------------------------------------
void keyPressed(){
  if(keyCode == RIGHT){
    p.change_x = MOVE_SPEED;
  }
  else if(keyCode == LEFT){
    p.change_x = -MOVE_SPEED;
  }
  else if(keyCode == UP && isOnPlatforms(p, platforms)){
    p.change_y = -JUMP_SPEED;
  }
  else if(isGameOver && key == ' '){
    setup();
  }
  else if(key == 'e'){
    pressed++;
    if(pressed >= 2){
      visible = false;
      pressed = 0;
      MOVE_SPEED = 12.5;
    }
    else{
      visible = true;
    }
  }
}
//--------------------------------------------------------------------------------------------
void mousePressed(){

  if(visible && mouseX + view_x >= 0 && mouseX < (map.width / 2) && mouseY + view_y >= 0 && mouseY < (map.height / 2)){
    
    numberOfImages = mouseY/(SPRITE_SIZE/2)*col + mouseX/(SPRITE_SIZE/2);
    
    image = imgArray[numberOfImages];
  
  }
  if(visible &&  (mouseX  + view_x > (map.width / 2) + view_x || mouseY + view_y > (map.height / 2) + view_y)){
  
    mouseX += view_x;
    mouseY += view_y;
    
    X = mouseX / SPRITE_SIZE;
    Y = mouseY / SPRITE_SIZE;
    
    if(lvl == 1){
      level1[Y * 100 + X] = numberOfImages;
      createPlatforms(level1);
    }
    
    if(lvl == 2){
      level2[Y * 100 + X] = numberOfImages;
      createPlatforms(level2);
    }
    
    else if (lvl == 3){
      level3[Y * 100 + X] = numberOfImages;
      createPlatforms(level3);
    }
    
    else{
      level1[Y * 100 + X] = numberOfImages;
      createPlatforms(level1);
    }
  }
}
//--------------------------------------------------------------------------------------------
void keyReleased(){
  if(keyCode == RIGHT){
      p.change_x = 0;
  }
  else if(keyCode == LEFT){
      p.change_x = 0;
  } 
}
//--------------------------------------------------------------------------------------------
void checkDeath(){
  boolean fallOffCliff = p.getBottom() > GROUND_LEVEL;
  if(fallOffCliff){
      lives--;
      if(lives == 0){
          isGameOver = true; 
          lost = true;
      }
      else{
          p.center_x = 100;
          p.setBottom(GROUND_LEVEL);
      }
  }
  if(win){
    isGameOver = true; 
  }
}
//--------------------------------------------------------------------------------------------
void displayAll(){
  for(Sprite s: platforms)
    s.display();

  p.display();
  
  if(visible){
  image(map, view_x + (map.width/4), view_y + (map.height/4), 960/2, 576/2);
  image(image, mouseX + view_x, mouseY + view_y, 32, 32);
  }
  
  textSize(32);
  fill(0, 0, 0);
  text("Lives:" + lives, view_x + 50, view_y + 100);

  if(isGameOver){
    fill(0,0,0);
    if(win){
      if(lvl == 4){
        text("YOU COMPLETED THE GAME!", view_x + width/2 - 100, view_y + height/2);
        text("SPACE to restart", view_x + width/2 - 100, view_y + height/2 + 200);
      }
      else if(lvl != 4){
         text("Level passed!", view_x + width/2 - 100, view_y + height/2);
         text("SPACE to go to next level", view_x + width/2 - 100, view_y + height/2 + 100);
      }
    }
       if(lost){
        text("YOU LOST!", view_x + width/2 - 100, view_y + height/2);
        text("SPACE to restart", view_x + width/2 - 100, view_y + height/2 + 100);
        lives = 3;
        lvl = 1;
    }
  }
}
//--------------------------------------------------------------------------------------------
void updateAll(){
  p.updateAnimation();
  resolveCollision(p, platforms);
  checkDeath();
}
